# -*- coding: utf-8 -*-

__all__ = ['BuildMatTestCase', 'CoefMatHeteroTestCase']

import unittest

import numpy as np

from data_tools import diffusion


class BuildMatTestCase(unittest.TestCase):
    def setUp(self):
        # Dirichlet BCs
        self.dirichlet_1d = np.array([[2, 1, 0],
                                      [1, 2, 1],
                                      [0, 1, 2]])

        self.dirichlet_2d = np.array([[2, 1, 0, 1, 0, 0, 0, 0, 0],
                                      [1, 2, 1, 0, 1, 0, 0, 0, 0],
                                      [0, 1, 2, 0, 0, 1, 0, 0, 0],
                                      [1, 0, 0, 2, 1, 0, 1, 0, 0],
                                      [0, 1, 0, 1, 2, 1, 0, 1, 0],
                                      [0, 0, 1, 0, 1, 2, 0, 0, 1],
                                      [0, 0, 0, 1, 0, 0, 2, 1, 0],
                                      [0, 0, 0, 0, 1, 0, 1, 2, 1],
                                      [0, 0, 0, 0, 0, 1, 0, 1, 2]])

        self.dirichlet_3d = np.array([[2, 1, 0, 1, 0, 0, 0, 0, 0,
                                       1, 0, 0, 0, 0, 0, 0, 0, 0,
                                       0, 0, 0, 0, 0, 0, 0, 0, 0],
                                      [1, 2, 1, 0, 1, 0, 0, 0, 0,
                                       0, 1, 0, 0, 0, 0, 0, 0, 0,
                                       0, 0, 0, 0, 0, 0, 0, 0, 0],
                                      [0, 1, 2, 0, 0, 1, 0, 0, 0,
                                       0, 0, 1, 0, 0, 0, 0, 0, 0,
                                       0, 0, 0, 0, 0, 0, 0, 0, 0],
                                      [1, 0, 0, 2, 1, 0, 1, 0, 0,
                                       0, 0, 0, 1, 0, 0, 0, 0, 0,
                                       0, 0, 0, 0, 0, 0, 0, 0, 0],
                                      [0, 1, 0, 1, 2, 1, 0, 1, 0,
                                       0, 0, 0, 0, 1, 0, 0, 0, 0,
                                       0, 0, 0, 0, 0, 0, 0, 0, 0],
                                      [0, 0, 1, 0, 1, 2, 0, 0, 1,
                                       0, 0, 0, 0, 0, 1, 0, 0, 0,
                                       0, 0, 0, 0, 0, 0, 0, 0, 0],
                                      [0, 0, 0, 1, 0, 0, 2, 1, 0,
                                       0, 0, 0, 0, 0, 0, 1, 0, 0,
                                       0, 0, 0, 0, 0, 0, 0, 0, 0],
                                      [0, 0, 0, 0, 1, 0, 1, 2, 1,
                                       0, 0, 0, 0, 0, 0, 0, 1, 0,
                                       0, 0, 0, 0, 0, 0, 0, 0, 0],
                                      [0, 0, 0, 0, 0, 1, 0, 1, 2,
                                       0, 0, 0, 0, 0, 0, 0, 0, 1,
                                       0, 0, 0, 0, 0, 0, 0, 0, 0],
                                      [1, 0, 0, 0, 0, 0, 0, 0, 0,
                                       2, 1, 0, 1, 0, 0, 0, 0, 0,
                                       1, 0, 0, 0, 0, 0, 0, 0, 0],
                                      [0, 1, 0, 0, 0, 0, 0, 0, 0,
                                       1, 2, 1, 0, 1, 0, 0, 0, 0,
                                       0, 1, 0, 0, 0, 0, 0, 0, 0],
                                      [0, 0, 1, 0, 0, 0, 0, 0, 0,
                                       0, 1, 2, 0, 0, 1, 0, 0, 0,
                                       0, 0, 1, 0, 0, 0, 0, 0, 0],
                                      [0, 0, 0, 1, 0, 0, 0, 0, 0,
                                       1, 0, 0, 2, 1, 0, 1, 0, 0,
                                       0, 0, 0, 1, 0, 0, 0, 0, 0],
                                      [0, 0, 0, 0, 1, 0, 0, 0, 0,
                                       0, 1, 0, 1, 2, 1, 0, 1, 0,
                                       0, 0, 0, 0, 1, 0, 0, 0, 0],
                                      [0, 0, 0, 0, 0, 1, 0, 0, 0,
                                       0, 0, 1, 0, 1, 2, 0, 0, 1,
                                       0, 0, 0, 0, 0, 1, 0, 0, 0],
                                      [0, 0, 0, 0, 0, 0, 1, 0, 0,
                                       0, 0, 0, 1, 0, 0, 2, 1, 0,
                                       0, 0, 0, 0, 0, 0, 1, 0, 0],
                                      [0, 0, 0, 0, 0, 0, 0, 1, 0,
                                       0, 0, 0, 0, 1, 0, 1, 2, 1,
                                       0, 0, 0, 0, 0, 0, 0, 1, 0],
                                      [0, 0, 0, 0, 0, 0, 0, 0, 1,
                                       0, 0, 0, 0, 0, 1, 0, 1, 2,
                                       0, 0, 0, 0, 0, 0, 0, 0, 1],
                                      [0, 0, 0, 0, 0, 0, 0, 0, 0,
                                       1, 0, 0, 0, 0, 0, 0, 0, 0,
                                       2, 1, 0, 1, 0, 0, 0, 0, 0],
                                      [0, 0, 0, 0, 0, 0, 0, 0, 0,
                                       0, 1, 0, 0, 0, 0, 0, 0, 0,
                                       1, 2, 1, 0, 1, 0, 0, 0, 0],
                                      [0, 0, 0, 0, 0, 0, 0, 0, 0,
                                       0, 0, 1, 0, 0, 0, 0, 0, 0,
                                       0, 1, 2, 0, 0, 1, 0, 0, 0],
                                      [0, 0, 0, 0, 0, 0, 0, 0, 0,
                                       0, 0, 0, 1, 0, 0, 0, 0, 0,
                                       1, 0, 0, 2, 1, 0, 1, 0, 0],
                                      [0, 0, 0, 0, 0, 0, 0, 0, 0,
                                       0, 0, 0, 0, 1, 0, 0, 0, 0,
                                       0, 1, 0, 1, 2, 1, 0, 1, 0],
                                      [0, 0, 0, 0, 0, 0, 0, 0, 0,
                                       0, 0, 0, 0, 0, 1, 0, 0, 0,
                                       0, 0, 1, 0, 1, 2, 0, 0, 1],
                                      [0, 0, 0, 0, 0, 0, 0, 0, 0,
                                       0, 0, 0, 0, 0, 0, 1, 0, 0,
                                       0, 0, 0, 1, 0, 0, 2, 1, 0],
                                      [0, 0, 0, 0, 0, 0, 0, 0, 0,
                                       0, 0, 0, 0, 0, 0, 0, 1, 0,
                                       0, 0, 0, 0, 1, 0, 1, 2, 1],
                                      [0, 0, 0, 0, 0, 0, 0, 0, 0,
                                       0, 0, 0, 0, 0, 0, 0, 0, 1,
                                       0, 0, 0, 0, 0, 1, 0, 1, 2]])

        # Periodic BCs
        self.periodic_1d = np.array([[2, 1, 1],
                                     [1, 2, 1],
                                     [1, 1, 2]])

        self.periodic_2d = np.array([[2, 1, 1, 1, 0, 0, 1, 0, 0],
                                     [1, 2, 1, 0, 1, 0, 0, 1, 0],
                                     [1, 1, 2, 0, 0, 1, 0, 0, 1],
                                     [1, 0, 0, 2, 1, 1, 1, 0, 0],
                                     [0, 1, 0, 1, 2, 1, 0, 1, 0],
                                     [0, 0, 1, 1, 1, 2, 0, 0, 1],
                                     [1, 0, 0, 1, 0, 0, 2, 1, 1],
                                     [0, 1, 0, 0, 1, 0, 1, 2, 1],
                                     [0, 0, 1, 0, 0, 1, 1, 1, 2]])

        self.periodic_3d = np.array([[2, 1, 1, 1, 0, 0, 1, 0, 0,
                                      1, 0, 0, 0, 0, 0, 0, 0, 0,
                                      1, 0, 0, 0, 0, 0, 0, 0, 0],
                                     [1, 2, 1, 0, 1, 0, 0, 1, 0,
                                      0, 1, 0, 0, 0, 0, 0, 0, 0,
                                      0, 1, 0, 0, 0, 0, 0, 0, 0],
                                     [1, 1, 2, 0, 0, 1, 0, 0, 1,
                                      0, 0, 1, 0, 0, 0, 0, 0, 0,
                                      0, 0, 1, 0, 0, 0, 0, 0, 0],
                                     [1, 0, 0, 2, 1, 1, 1, 0, 0,
                                      0, 0, 0, 1, 0, 0, 0, 0, 0,
                                      0, 0, 0, 1, 0, 0, 0, 0, 0],
                                     [0, 1, 0, 1, 2, 1, 0, 1, 0,
                                      0, 0, 0, 0, 1, 0, 0, 0, 0,
                                      0, 0, 0, 0, 1, 0, 0, 0, 0],
                                     [0, 0, 1, 1, 1, 2, 0, 0, 1,
                                      0, 0, 0, 0, 0, 1, 0, 0, 0,
                                      0, 0, 0, 0, 0, 1, 0, 0, 0],
                                     [1, 0, 0, 1, 0, 0, 2, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 0, 0,
                                      0, 0, 0, 0, 0, 0, 1, 0, 0],
                                     [0, 1, 0, 0, 1, 0, 1, 2, 1,
                                      0, 0, 0, 0, 0, 0, 0, 1, 0,
                                      0, 0, 0, 0, 0, 0, 0, 1, 0],
                                     [0, 0, 1, 0, 0, 1, 1, 1, 2,
                                      0, 0, 0, 0, 0, 0, 0, 0, 1,
                                      0, 0, 0, 0, 0, 0, 0, 0, 1],
                                     [1, 0, 0, 0, 0, 0, 0, 0, 0,
                                      2, 1, 1, 1, 0, 0, 1, 0, 0,
                                      1, 0, 0, 0, 0, 0, 0, 0, 0],
                                     [0, 1, 0, 0, 0, 0, 0, 0, 0,
                                      1, 2, 1, 0, 1, 0, 0, 1, 0,
                                      0, 1, 0, 0, 0, 0, 0, 0, 0],
                                     [0, 0, 1, 0, 0, 0, 0, 0, 0,
                                      1, 1, 2, 0, 0, 1, 0, 0, 1,
                                      0, 0, 1, 0, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 1, 0, 0, 0, 0, 0,
                                      1, 0, 0, 2, 1, 1, 1, 0, 0,
                                      0, 0, 0, 1, 0, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 1, 0, 0, 0, 0,
                                      0, 1, 0, 1, 2, 1, 0, 1, 0,
                                      0, 0, 0, 0, 1, 0, 0, 0, 0],
                                     [0, 0, 0, 0, 0, 1, 0, 0, 0,
                                      0, 0, 1, 1, 1, 2, 0, 0, 1,
                                      0, 0, 0, 0, 0, 1, 0, 0, 0],
                                     [0, 0, 0, 0, 0, 0, 1, 0, 0,
                                      1, 0, 0, 1, 0, 0, 2, 1, 1,
                                      0, 0, 0, 0, 0, 0, 1, 0, 0],
                                     [0, 0, 0, 0, 0, 0, 0, 1, 0,
                                      0, 1, 0, 0, 1, 0, 1, 2, 1,
                                      0, 0, 0, 0, 0, 0, 0, 1, 0],
                                     [0, 0, 0, 0, 0, 0, 0, 0, 1,
                                      0, 0, 1, 0, 0, 1, 1, 1, 2,
                                      0, 0, 0, 0, 0, 0, 0, 0, 1],
                                     [1, 0, 0, 0, 0, 0, 0, 0, 0,
                                      1, 0, 0, 0, 0, 0, 0, 0, 0,
                                      2, 1, 1, 1, 0, 0, 1, 0, 0],
                                     [0, 1, 0, 0, 0, 0, 0, 0, 0,
                                      0, 1, 0, 0, 0, 0, 0, 0, 0,
                                      1, 2, 1, 0, 1, 0, 0, 1, 0],
                                     [0, 0, 1, 0, 0, 0, 0, 0, 0,
                                      0, 0, 1, 0, 0, 0, 0, 0, 0,
                                      1, 1, 2, 0, 0, 1, 0, 0, 1],
                                     [0, 0, 0, 1, 0, 0, 0, 0, 0,
                                      0, 0, 0, 1, 0, 0, 0, 0, 0,
                                      1, 0, 0, 2, 1, 1, 1, 0, 0],
                                     [0, 0, 0, 0, 1, 0, 0, 0, 0,
                                      0, 0, 0, 0, 1, 0, 0, 0, 0,
                                      0, 1, 0, 1, 2, 1, 0, 1, 0],
                                     [0, 0, 0, 0, 0, 1, 0, 0, 0,
                                      0, 0, 0, 0, 0, 1, 0, 0, 0,
                                      0, 0, 1, 1, 1, 2, 0, 0, 1],
                                     [0, 0, 0, 0, 0, 0, 1, 0, 0,
                                      0, 0, 0, 0, 0, 0, 1, 0, 0,
                                      1, 0, 0, 1, 0, 0, 2, 1, 1],
                                     [0, 0, 0, 0, 0, 0, 0, 1, 0,
                                      0, 0, 0, 0, 0, 0, 0, 1, 0,
                                      0, 1, 0, 0, 1, 0, 1, 2, 1],
                                     [0, 0, 0, 0, 0, 0, 0, 0, 1,
                                      0, 0, 0, 0, 0, 0, 0, 0, 1,
                                      0, 0, 1, 0, 0, 1, 1, 1, 2]])

        # Neumann BCs
        self.neumann_1d = np.array([[3, 1, 0],
                                    [1, 2, 1],
                                    [0, 1, 3]])

        self.neumann_2d = np.array([[4, 1, 0, 1, 0, 0, 0, 0, 0],
                                    [1, 3, 1, 0, 1, 0, 0, 0, 0],
                                    [0, 1, 4, 0, 0, 1, 0, 0, 0],
                                    [1, 0, 0, 3, 1, 0, 1, 0, 0],
                                    [0, 1, 0, 1, 2, 1, 0, 1, 0],
                                    [0, 0, 1, 0, 1, 3, 0, 0, 1],
                                    [0, 0, 0, 1, 0, 0, 4, 1, 0],
                                    [0, 0, 0, 0, 1, 0, 1, 3, 1],
                                    [0, 0, 0, 0, 0, 1, 0, 1, 4]])

        self.neumann_3d = np.array([[5, 1, 0, 1, 0, 0, 0, 0, 0,
                                     1, 0, 0, 0, 0, 0, 0, 0, 0,
                                     0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [1, 4, 1, 0, 1, 0, 0, 0, 0,
                                     0, 1, 0, 0, 0, 0, 0, 0, 0,
                                     0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 1, 5, 0, 0, 1, 0, 0, 0,
                                     0, 0, 1, 0, 0, 0, 0, 0, 0,
                                     0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [1, 0, 0, 4, 1, 0, 1, 0, 0,
                                     0, 0, 0, 1, 0, 0, 0, 0, 0,
                                     0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 1, 0, 1, 3, 1, 0, 1, 0,
                                     0, 0, 0, 0, 1, 0, 0, 0, 0,
                                     0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 1, 0, 1, 4, 0, 0, 1,
                                     0, 0, 0, 0, 0, 1, 0, 0, 0,
                                     0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 1, 0, 0, 5, 1, 0,
                                     0, 0, 0, 0, 0, 0, 1, 0, 0,
                                     0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 1, 0, 1, 4, 1,
                                     0, 0, 0, 0, 0, 0, 0, 1, 0,
                                     0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 1, 0, 1, 5,
                                     0, 0, 0, 0, 0, 0, 0, 0, 1,
                                     0, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [1, 0, 0, 0, 0, 0, 0, 0, 0,
                                     4, 1, 0, 1, 0, 0, 0, 0, 0,
                                     1, 0, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 1, 0, 0, 0, 0, 0, 0, 0,
                                     1, 3, 1, 0, 1, 0, 0, 0, 0,
                                     0, 1, 0, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 1, 0, 0, 0, 0, 0, 0,
                                     0, 1, 4, 0, 0, 1, 0, 0, 0,
                                     0, 0, 1, 0, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 1, 0, 0, 0, 0, 0,
                                     1, 0, 0, 3, 1, 0, 1, 0, 0,
                                     0, 0, 0, 1, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 1, 0, 0, 0, 0,
                                     0, 1, 0, 1, 2, 1, 0, 1, 0,
                                     0, 0, 0, 0, 1, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 1, 0, 0, 0,
                                     0, 0, 1, 0, 1, 3, 0, 0, 1,
                                     0, 0, 0, 0, 0, 1, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 1, 0, 0,
                                     0, 0, 0, 1, 0, 0, 4, 1, 0,
                                     0, 0, 0, 0, 0, 0, 1, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 1, 0,
                                     0, 0, 0, 0, 1, 0, 1, 3, 1,
                                     0, 0, 0, 0, 0, 0, 0, 1, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 1,
                                     0, 0, 0, 0, 0, 1, 0, 1, 4,
                                     0, 0, 0, 0, 0, 0, 0, 0, 1],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 0,
                                     1, 0, 0, 0, 0, 0, 0, 0, 0,
                                     5, 1, 0, 1, 0, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 0,
                                     0, 1, 0, 0, 0, 0, 0, 0, 0,
                                     1, 4, 1, 0, 1, 0, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 0,
                                     0, 0, 1, 0, 0, 0, 0, 0, 0,
                                     0, 1, 5, 0, 0, 1, 0, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 0,
                                     0, 0, 0, 1, 0, 0, 0, 0, 0,
                                     1, 0, 0, 4, 1, 0, 1, 0, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 0,
                                     0, 0, 0, 0, 1, 0, 0, 0, 0,
                                     0, 1, 0, 1, 3, 1, 0, 1, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 0,
                                     0, 0, 0, 0, 0, 1, 0, 0, 0,
                                     0, 0, 1, 0, 1, 4, 0, 0, 1],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 0,
                                     0, 0, 0, 0, 0, 0, 1, 0, 0,
                                     0, 0, 0, 1, 0, 0, 5, 1, 0],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 0,
                                     0, 0, 0, 0, 0, 0, 0, 1, 0,
                                     0, 0, 0, 0, 1, 0, 1, 4, 1],
                                    [0, 0, 0, 0, 0, 0, 0, 0, 0,
                                     0, 0, 0, 0, 0, 0, 0, 0, 1,
                                     0, 0, 0, 0, 0, 1, 0, 1, 5]])

    def test_dirichlet_1d(self):
        np.testing.assert_array_equal(self.dirichlet_1d,
                                      diffusion.build_mat(2, 1, 3))

    def test_dirichlet_2d(self):
        np.testing.assert_array_equal(self.dirichlet_2d,
                                      diffusion.build_mat(2, 1, [3, 3]))

    def test_dirichlet_3d(self):
        np.testing.assert_array_equal(self.dirichlet_3d,
                                      diffusion.build_mat(2, 1, [3, 3, 3]))

    def test_periodic_1d(self):
        np.testing.assert_array_equal(self.periodic_1d,
                                      diffusion.build_mat(2, 1, 3,
                                                          bcs='periodic'))

    def test_periodic_2d(self):
        np.testing.assert_array_equal(self.periodic_2d,
                                      diffusion.build_mat(2, 1, [3, 3],
                                                          bcs='periodic'))

    def test_periodic_3d(self):
        np.testing.assert_array_equal(self.periodic_3d,
                                      diffusion.build_mat(2, 1, [3, 3, 3],
                                                          bcs='periodic'))

    def test_neumann_1d(self):
        np.testing.assert_array_equal(self.neumann_1d,
                                      diffusion.build_mat(2, 1, 3,
                                                          bcs='neumann'))

    def test_neumann_2d(self):
        np.testing.assert_array_equal(self.neumann_2d,
                                      diffusion.build_mat(2, 1, [3, 3],
                                                          bcs='neumann'))

    def test_neumann_3d(self):
        np.testing.assert_array_equal(self.neumann_3d,
                                      diffusion.build_mat(2, 1, [3, 3, 3],
                                                          bcs='neumann'))
class CoefMatHeteroTestCase(unittest.TestCase):
    @unittest.skip('** NOTE **: data_tools.diffusion.coef_mat_hetero test unit
                   + 'is not implemented.')
    def test_null(self):
        pass
